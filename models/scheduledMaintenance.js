// backend/models/ScheduledMaintenance.js

const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid'); // For generating UUIDs (used for public link token by user's code)

const scheduledMaintenanceSchema = new mongoose.Schema({
    title: { 
        type: String, 
        required: [true, 'Title is required for scheduled maintenance.'],
        trim: true 
    },
    description: { 
        type: String, 
        required: [true, 'Description is required for scheduled maintenance.'], 
        maxlength: [1000, 'Description cannot exceed 1000 characters.'] 
    },
    category: { 
        type: String, 
        enum: ['plumbing', 'electrical', 'hvac', 'appliance', 'structural', 'landscaping', 'other', 'security', 'pest_control', 'cleaning'], // Consistent lowercase, match request categories
        required: [true, 'Category is required.'],
        lowercase: true
    },
    property: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'Property', 
        required: [true, 'Property is required for scheduled maintenance.'], 
        index: true 
    },
    unit: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'Unit', 
        default: null,
        sparse: true // Allows null units for property-wide maintenance
    },
    scheduledDate: { // The initial date for the maintenance or next due date for recurring
        type: Date, 
        required: [true, 'Scheduled date is required.'] 
    },
    recurring: { 
        type: Boolean, 
        default: false 
    },
    // The frequency sub-document details the recurrence pattern
    frequency: { 
        type: Object, // Changed to Object type, containing frequency details if recurring is true
        // Nested fields will be used if `recurring` is true
        type: { type: String, enum: ['daily', 'weekly', 'monthly', 'yearly', 'custom_days'], default: null, lowercase: true }, // Renamed from frequency to type to avoid conflict
        interval: { type: Number, default: null, min: 1 }, // e.g., every 2 weeks
        dayOfWeek: { type: Number, default: null, min: 0, max: 6 }, // 0=Sunday, 1=Monday... (for weekly)
        dayOfMonth: { type: [Number], default: null, min: 1, max: 31 }, // (for monthly)
        monthOfYear: { type: Number, default: null, min: 1, max: 12 }, // (for yearly)
        customDays: { type: [Number], default: [] } // For custom_days, e.g., [1, 3, 5] for Monday, Wednesday, Friday
    },
    lastGeneratedRequest: { // Store ref to the last MaintenanceRequest generated by this schedule
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Request',
        default: null
    },
    nextDueDate: { // Calculated by cron job, and updated
        type: Date,
        default: null
    },
    status: { 
        type: String, 
        enum: ['scheduled', 'in_progress', 'completed', 'canceled'], // Consistent lowercase, added 'canceled', 'in_progress'
        default: 'scheduled', 
        index: true,
        lowercase: true
    },
    // Polymorphic assignment: can be assigned to a User (PM/Landlord/Admin) or a Vendor
    assignedTo: { 
        type: mongoose.Schema.Types.ObjectId, 
        refPath: 'assignedToModel', 
        default: null 
    },
    assignedToModel: { // Stores the model name ('User' or 'Vendor') for `assignedTo`
        type: String, 
        enum: ['User', 'Vendor'], 
        default: null 
    },
    createdBy: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: 'User', 
        required: [true, 'Creator is required for scheduled maintenance.'] 
    },
    media: [{ // Array of URLs to media files (photos, videos)
        type: String // Changed from `Media` ObjectId reference to direct URL string
    }],
    comments: [{ // Embedded array of comments/notes for the scheduled maintenance
        user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
        text: { type: String, required: true, maxlength: [1000, 'Comment text cannot exceed 1000 characters.'] },
        isInternalNote: { type: Boolean, default: false }, // For PM/Landlord private notes
        timestamp: { type: Date, default: Date.now }
    }],

    // Public link for external vendors to view scheduled tasks
    publicLinkToken: { 
        type: String, 
        unique: true, 
        sparse: true 
    }, 
    publicLinkExpires: { 
        type: Date, 
        default: null 
    },
    publicLinkEnabled: { 
        type: Boolean, 
        default: false 
    },

}, { 
    timestamps: true 
});

// Pre-save hook for handling public link token generation
scheduledMaintenanceSchema.pre('save', function (next) {
    // Only generate if enabled and no token exists
    if (this.publicLinkEnabled && !this.publicLinkToken) {
        this.publicLinkToken = uuidv4(); // Using uuidv4 as per your original code
        // Set a default expiry if not provided
        if (!this.publicLinkExpires) {
            this.publicLinkExpires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // Default 7 days expiry
        }
    }
    next();
});

scheduledMaintenanceSchema.index({ property: 1, unit: 1, status: 1, scheduledDate: 1 });
scheduledMaintenanceSchema.index({ assignedTo: 1, status: 1 }); // For filtering by assignee
scheduledMaintenanceSchema.index({ publicLinkToken: 1 }); // For quick public link lookups

module.exports = mongoose.models.ScheduledMaintenance || mongoose.model('ScheduledMaintenance', scheduledMaintenanceSchema);
